name: FlexStock CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['8.1', '8.2']

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: flexstock_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, pdo_mysql, redis, gd, zip
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy .env
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure environment for testing
        run: |
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=flexstock_test/' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=root/' .env
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/' .env
          sed -i 's/CACHE_DRIVER=file/CACHE_DRIVER=redis/' .env
          sed -i 's/QUEUE_CONNECTION=sync/QUEUE_CONNECTION=redis/' .env
          sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=127.0.0.1/' .env

      - name: Wait for MySQL
        run: |
          until mysql -h 127.0.0.1 -u root -ppassword -e "SELECT 1"; do
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run migrations
        run: php artisan migrate --force
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: flexstock_test
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Seed database
        run: php artisan db:seed --class=DemoSeeder --force

      - name: Create storage directories
        run: |
          mkdir -p storage/app/public/slips
          mkdir -p storage/framework/{cache,sessions,testing,views}
          chmod -R 777 storage bootstrap/cache

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --coverage-clover coverage.xml
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: flexstock_test
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Upload coverage to Codecov
        if: matrix.php-version == '8.1'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring
          tools: composer:v2, phpstan

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Run PHP CS Fixer (dry-run)
        run: vendor/bin/pint --test
        continue-on-error: true

      - name: Run PHPStan (if available)
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse --memory-limit=2G
          else
            echo "PHPStan not installed, skipping..."
          fi
        continue-on-error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          tools: composer:v2

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Run security audit
        run: composer audit
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging (placeholder)
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "This is where you would deploy to your staging server"
          # Add your deployment script here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, code-quality, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production (placeholder)
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "This is where you would deploy to your production server"
          # Add your deployment script here
